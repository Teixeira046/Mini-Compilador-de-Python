grammar PythonParser;

code: (stat | condicional | func | func_call)* EOF;

stat: (expr | query) NEWLINE;

condicional
    : 'if' query ':' block
    | 'if' query ':' block 'else' ':' block
    | 'if' query ':' block 'elifBranch+ else' ':' block
    ;

elifBranch
    : 'elif' query ':' block;

func
    : 'def' ID '(' paramList? ')' ':' block
    
    ;

paramList
    : ID (',' ID)*;

func_call
    : ID '(' argList? ')' NEWLINE

    ;

argList
    : expr (',' expr)*;

block
    : (stat | condicional | func_call | func)+;

expr
    : ID                            
    | NUMBER 
    | func_call_expr                      
    | expr op=('*'|'/') expr        
    | expr op=('+'|'-') expr        
    | '(' expr ')'                  
    ;

func_call_expr
    : ID '(' argList? ')' ;
    
query
    : BOOL
    | query op=('AND' | 'OR' ) query
    | 'NOT' query
    | '(' query ')'
    | expr relOp expr
    ;

relOp: '==' | '!=' | '<' | '<=' | '>' | '>=';

BOOL: 'TRUE' | 'FALSE';

ID: [a-zA-Z_][a-zA-Z0-9_]*;
NUMBER: [0-9]+ ('.' [0-9]+)?;
NEWLINE: '\r'? '\n';
WS: [ \t]+ -> skip;